* What about a prettier date/time display format?  Prettier than using "web time", that is...
* date/time filters...with chooser widget
* [x-begin with simple nav-pills for now] Use fancy Bootstrap navbar on top of scrumi...
* Replace tables with bootstrap div's...?  Or should tabular data be displayed
  in tables...?
    https://stackoverflow.com/questions/32741186/how-to-convert-table-based-layout-with-bootstrap-row-and-col
--
* [x-all left for now] Set alignment for <td>'s...right now they default to 'center'...most will be 'left', I presume...
  ...but for reference, reverse engineer what we did for 1-800-FLOWERS
-- <deployed> late 8/21/2019 --
* [x] Fix:
  Center the timestamp and the "Objectives" heading...
  (no more overlapping for tablet)
* [x] Gussie: Add the "No Objectives", "1 Objective", "2 Objectives" functionality as with
  1-800-FLOWERS ... and then filter text "...with Description Filter='Joe'"
* (x) https://stackoverflow.com/questions/39451816/bootstrap-button-full-width-for-smaller-screen-sizes
* [x] https://stackoverflow.com/questions/43954090/resize-html-table-width-based-on-screen-size   
-- </deployed> --
-- deploy -- 
* what about a "clear all filter fields" button
* Export as CSV...looks like these guys did most of the work for you...https://stackoverflow.com/questions/48760815/export-to-csv-button-in-react-table
* Eventually: Paginating the objectives...which makes more sense if we have
  more of 'em...
* Add unit tests for all the validation stuff
* 8/14/2019: See if we can get a better DB error message in
./src/server/models/users.js when the login lookup fails...
* 8/14/2019: Show 'login' on the users screen...

* Put in tests for the Users Screen
* Put in 1-800-FLOWERS comprehensive unit tests

* [2019-04-15--deployed to johndavidaynedjian.com] Add Users Screen (via
  Router)...with filters and sorting...

* Put in edit functionality for Objectives and Users...(but first you'll need
  login and token-based authentication, if you want to deploy to johndavidaynedjian.com...
  ...you can also later on perhaps add "superficial editing" if the user is not logged
  in...as you did for the 1-800-FLOWERS thang...or perhaps better yet, session
  based or Browser DB based non-persistent editing...?

* Gussy: ObjectivesListComponent.js: Make longhand timestamp a 12-hour rather than a
  24-hour time...current sample:
   "Wed Apr 03 2019 21:31:10 GMT-0400 (Eastern Daylight Time)"

* Add pagination...(add page-number, and items-per-page as a parameter to the
  OBJECTIVES_GET Action...)

[x-2019-02-27] Add router support for /debug=true as was done in treebuchet.

* [2019-04-02] Put in default sort-by

* Display the new table columns with filters...
   [x][Comments]

* Stop serving up Action's from the server...form the actions on the client instead.

* [2019-04-11] Deploy to digital ocean: "Let your light so shine before men that they
  may see your good works and glorify your Father which is in heaven..."

* Add test to ObjectivesListComponent.test.js to make sure the string
  list of filters is populated properly...

* Continue with basic CRUD functionality...and you may add
  tests _after_ implementing if you'd like...

* Re-read Learning React 

* LATER: Make RESTful API into GraphQL API...

* fancy: Use HTML5 video in lieue of animated gif in 
    ./dist/assets/images/gold-brass-gear-cogs-animated-5.gif
* fancy: Animate the submit button itself to "turn" along with the gears...

* fancy: remember last sort by and filters via browser db and/or cookies.

* Get rid of leftover stuff from treebuchet, etc. (to make istanbul say we're
  closer to 100% coverage)...then tweak tests to bring us closer to 100%
  coverage...

* Add "end-to-end" tests for the REST API...(using actual node request objects
   and/or supertest for not quite end-to-end...)...we may be OK with using
   the actual database for these...(these may not _really_ be necessary
   since we're testing out the models themselves -- complete with DB
   connections, and also testing out the api's...but they are a good
   way to make sure everything's functioning REST-fully...)

* Add full end-to-end tests with Jest and Puppeteer...

* Add first filter -- description_filter 
        [x] dbmodels.test.js -- test that DB model filters by description
        [x] ObjectivesFilterForm.test.js -- test that description filter is
               passed in call to onObjectivesFilter... 

* break out dbmodels.test.js from unit tests since it's really more
  of an end-to-end test...
