* Stop serving up Action's from the server...form
  the actions on the client instead.
[x-2019-02-27] Add router support for /debug=true as was done in treebuchet.
* Put in default sort-by
* Display the new table columns
* Continue with basic CRUD functionality...and you may add
  tests _after_ implementing if you'd like...
* Re-read Learning React 
* LATER: Make RESTful API into GraphQL API...

* fancy: Use HTML5 video in lieue of animated gif in 
    ./dist/assets/images/gold-brass-gear-cogs-animated-5.gif
* fancy: Animate the submit button itself to "turn" along with the gears...

* fancy: remember last sort by and filters via browser db and/or cookies.

* Get rid of leftover stuff from treebuchet, etc. (to make istanbul say we're
  closer to 100% coverage)...then tweak tests to bring us closer to 100%
  coverage...

* Add "end-to-end" tests for the REST API...(using actual node request objects
   and/or supertest for not quite end-to-end...)...we may be OK with using
   the actual database for these...(these may not _really_ be necessary
   since we're testing out the models themselves -- complete with DB
   connections, and also testing out the api's...but they are a good
   way to make sure everything's functioning REST-fully...)

* Add full end-to-end tests with Jest and Puppeteer...

* Add first filter -- description_filter 
        [x] dbmodels.test.js -- test that DB model filters by description
        [x] ObjectivesFilterForm.test.js -- test that description filter is
               passed in call to onObjectivesFilter... 

* break out dbmodels.test.js from unit tests since it's really more
  of an end-to-end test...
